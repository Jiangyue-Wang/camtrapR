
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "camtrapR"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "camtrapR-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('camtrapR')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("activityDensity")
> ### * activityDensity
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: activityDensity
> ### Title: Plot kernel density estimation of single-species activity
> ### Aliases: activityDensity
> 
> ### ** Examples
> 
> # load record table
> data(recordTableSample)
> 
> species4activity <- "VTA"    # = Viverra tangalunga, Malay Civet
> 
> activityDensity(recordTable = recordTableSample,
+                 species     = species4activity)
> 
> 
> # all species at once
> 
> activityDensity(recordTable = recordTableSample,
+                 allSpecies  = TRUE,
+                 writePNG    = FALSE,
+                 plotR       = TRUE,
+                 add.rug     = TRUE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("activityDensity", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("activityHistogram")
> ### * activityHistogram
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: activityHistogram
> ### Title: Plot histogram of single-species activity
> ### Aliases: activityHistogram
> 
> ### ** Examples
> 
> 
> # load record table
> data(recordTableSample)
> 
> # generate activity histogram
> species4activity <- "VTA"    # = Viverra tangalunga, Malay Civet
> 
> activityHistogram (recordTable = recordTableSample,
+                    species     = species4activity,
+                    allSpecies = FALSE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("activityHistogram", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("activityOverlap")
> ### * activityOverlap
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: activityOverlap
> ### Title: Plot overlapping kernel densities of two-species activities
> ### Aliases: activityOverlap
> 
> ### ** Examples
> 
> # load record table
> data(recordTableSample)
> 
> # define species of interest
> speciesA_for_activity <- "VTA"    # = Viverra tangalunga, Malay Civet
> speciesB_for_activity <- "PBE"    # = Prionailurus bengalensis, Leopard Cat
> 
> # create activity overlap plot (basic)
> activityOverlap (recordTable = recordTableSample,
+                  speciesA    = "VTA",    # = Viverra tangalunga, Malay Civet
+                  speciesB    = "PBE",    # = Prionailurus bengalensis, Leopard Cat
+                  writePNG    = FALSE,
+                  plotR       = TRUE
+ )
> 
> 
>                                      
> # create activity overlap plot (prettier and with some overlapPlot arguments set)
> 
> activityOverlap (recordTable = recordTableSample,
+                  speciesA    = speciesA_for_activity,
+                  speciesB    = speciesB_for_activity,
+                  writePNG    = FALSE,
+                  plotR       = TRUE,
+                  createDir   = FALSE,
+                  pngMaxPix   = 1000,
+                  linecol     = c("black", "blue"),
+                  linewidth   = c(5,3),
+                  linetype    = c(1, 2),
+                  olapcol     = "darkgrey",
+                  add.rug     = TRUE,
+                  extend      = "lightgrey",
+                  ylim        = c(0, 0.25),
+                  main        = paste("Activity overlap between ", 
+                                      speciesA_for_activity, "and", 
+                                      speciesB_for_activity)
+ )
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("activityOverlap", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("activityRadial")
> ### * activityRadial
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: activityRadial
> ### Title: Radial plots of single-species activity
> ### Aliases: activityRadial
> 
> ### ** Examples
> 
> 
> # load record table
> data(recordTableSample)
> 
> species4activity <- "PBE"    # = Prionailurus bengalensis, Leopard Cat
> 
> activityRadial(recordTable       = recordTableSample,
+                species           = species4activity,
+                allSpecies        = FALSE,
+                speciesCol        = "Species",
+                recordDateTimeCol = "DateTimeOriginal",
+                plotR             = TRUE,
+                writePNG          = FALSE,
+                lwd               = 5
+ )
> 
> # plot type = polygon
> 
> activityRadial(recordTable       = recordTableSample,
+                species           = species4activity,
+                allSpecies        = FALSE,
+                speciesCol        = "Species",
+                recordDateTimeCol = "DateTimeOriginal",
+                plotR             = TRUE,
+                writePNG          = FALSE,
+                lwd               = 5,
+                rp.type           = "p"      
+ )
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("activityRadial", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("addCopyrightTag")
> ### * addCopyrightTag
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: addCopyrightTag
> ### Title: Write a copyright tag into JPEG image metadata
> ### Aliases: addCopyrightTag
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D 
> ##D if (Sys.which("exiftool") != ""){        # only run this example if ExifTool is available
> ##D 
> ##D # copy sample images to temporary directory (so we don't mess around in the package directory)
> ##D wd_images_ID <- system.file(file.path("pictures", "sample_images"), package = "camtrapR")
> ##D file.copy(from = wd_images_ID, to = tempdir(), recursive = TRUE)
> ##D wd_images_ID_copy <- file.path(tempdir(), "sample_images")
> ##D 
> ##D # define a sample tag
> ##D copyrightTagToAdd <- "Your Name (Your Organisation)"
> ##D 
> ##D # add the tag to the images
> ##D addCopyrightTag(inDir        = wd_images_ID_copy, 
> ##D                 copyrightTag = copyrightTagToAdd)
> ##D 1     # we choose "YES", i.e., we want to add a copyright tag
> ##D                 
> ##D # you can check the outcome with function exifTagNames (find the field "Copyright")
> ##D 
> ##D exifTagNames(wd_images_ID_copy, returnMetadata = TRUE)
> ##D }
> ##D 
> ##D 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("addCopyrightTag", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("appendSpeciesNames")
> ### * appendSpeciesNames
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: appendSpeciesNames
> ### Title: Add or remove species names from JPEG image filenames
> ### Aliases: appendSpeciesNames
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # copy sample images to another location (so we don't mess around in the package directory)
> ##D wd_images_ID <- system.file("pictures/sample_images", package = "camtrapR")
> ##D file.copy(from = wd_images_ID, to = getwd(), recursive = TRUE)       
> ##D wd_images_ID_copy <- file.path(getwd(), "sample_images")
> ##D 
> ##D # append species names
> ##D SpecNameAppend1 <- appendSpeciesNames(inDir            = wd_images_ID_copy,
> ##D                                       IDfrom           = "directory",
> ##D                                       hasCameraFolders = FALSE,
> ##D                                       removeNames      = FALSE,
> ##D                                       writecsv         = FALSE)
> ##D   
> ##D SpecNameAppend1
> ##D 
> ##D # remove species names
> ##D SpecNameRemove1 <- appendSpeciesNames(inDir            = wd_images_ID_copy,
> ##D                                       IDfrom           = "directory",
> ##D                                       hasCameraFolders = FALSE,
> ##D                                       removeNames      = TRUE,
> ##D                                       writecsv         = FALSE)
> ##D   
> ##D SpecNameRemove1
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("appendSpeciesNames", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("cameraOperation")
> ### * cameraOperation
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: cameraOperation
> ### Title: Create a camera trap station operability matrix
> ### Aliases: cameraOperation
> 
> ### ** Examples
> 
> 
> data(camtraps)
> 
> # no problems/malfunction
> camop_no_problem <- cameraOperation(CTtable      = camtraps,
+                                     stationCol   = "Station",
+                                     setupCol     = "Setup_date",
+                                     retrievalCol = "Retrieval_date",
+                                     writecsv     = FALSE,
+                                     hasProblems  = FALSE,
+                                     dateFormat   = "%d/%m/%Y"
+ )
> 
> # with problems/malfunction
> camop_problem <- cameraOperation(CTtable      = camtraps,
+                                  stationCol   = "Station",
+                                  setupCol     = "Setup_date",
+                                  retrievalCol = "Retrieval_date",
+                                  writecsv     = FALSE,
+                                  hasProblems  = TRUE,
+                                  dateFormat   = "%d/%m/%Y"
+ )
> 
> # with problems/malfunction / dateFormat in lubridate format
> camop_problem_lubridate <- cameraOperation(CTtable      = camtraps,
+                                            stationCol   = "Station",
+                                            setupCol     = "Setup_date",
+                                            retrievalCol = "Retrieval_date",
+                                            writecsv     = FALSE,
+                                            hasProblems  = TRUE,
+                                            dateFormat   = "dmy"
+ )
> 
> camop_no_problem
         2009-04-02 2009-04-03 2009-04-04 2009-04-05 2009-04-06 2009-04-07
StationA          1          1          1          1          1          1
StationB         NA          1          1          1          1          1
StationC         NA         NA          1          1          1          1
         2009-04-08 2009-04-09 2009-04-10 2009-04-11 2009-04-12 2009-04-13
StationA          1          1          1          1          1          1
StationB          1          1          1          1          1          1
StationC          1          1          1          1          1          1
         2009-04-14 2009-04-15 2009-04-16 2009-04-17 2009-04-18 2009-04-19
StationA          1          1          1          1          1          1
StationB          1          1          1          1          1          1
StationC          1          1          1          1          1          1
         2009-04-20 2009-04-21 2009-04-22 2009-04-23 2009-04-24 2009-04-25
StationA          1          1          1          1          1          1
StationB          1          1          1          1          1          1
StationC          1          1          1          1          1          1
         2009-04-26 2009-04-27 2009-04-28 2009-04-29 2009-04-30 2009-05-01
StationA          1          1          1          1          1          1
StationB          1          1          1          1          1          1
StationC          1          1          1          1          1          1
         2009-05-02 2009-05-03 2009-05-04 2009-05-05 2009-05-06 2009-05-07
StationA          1          1          1          1          1          1
StationB          1          1          1          1          1          1
StationC          1          1          1          1          1          1
         2009-05-08 2009-05-09 2009-05-10 2009-05-11 2009-05-12 2009-05-13
StationA          1          1          1          1          1          1
StationB          1          1          1          1          1          1
StationC          1          1          1          1          1          1
         2009-05-14 2009-05-15 2009-05-16 2009-05-17
StationA          1         NA         NA         NA
StationB          1          1          1         NA
StationC          1          1          1          1
> camop_problem
         2009-04-02 2009-04-03 2009-04-04 2009-04-05 2009-04-06 2009-04-07
StationA          1          1          1          1          1          1
StationB         NA          1          1          1          1          1
StationC         NA         NA          1          1          1          1
         2009-04-08 2009-04-09 2009-04-10 2009-04-11 2009-04-12 2009-04-13
StationA          1          1          1          1          1          1
StationB          1          1          1          1          1          1
StationC          1          1          1          1          1          1
         2009-04-14 2009-04-15 2009-04-16 2009-04-17 2009-04-18 2009-04-19
StationA          1          1          1          1          1          1
StationB          1          1          1          1          1          1
StationC          1          1          1          1          1          1
         2009-04-20 2009-04-21 2009-04-22 2009-04-23 2009-04-24 2009-04-25
StationA          1          1          1          1          1          1
StationB          1          1          1          1          1          1
StationC          1          1          1          1          1          1
         2009-04-26 2009-04-27 2009-04-28 2009-04-29 2009-04-30 2009-05-01
StationA          1          1          1          1          1          1
StationB          1          1          1          1          1          1
StationC          1          1          1          1          1          1
         2009-05-02 2009-05-03 2009-05-04 2009-05-05 2009-05-06 2009-05-07
StationA          1          1          1          1          1          1
StationB          1          1          1          1          1          1
StationC          1          1          1          1          1          1
         2009-05-08 2009-05-09 2009-05-10 2009-05-11 2009-05-12 2009-05-13
StationA          1          1          1          1          1          1
StationB          1          1          1          1          1          1
StationC          1          1          1          1          0          0
         2009-05-14 2009-05-15 2009-05-16 2009-05-17
StationA          1         NA         NA         NA
StationB          1          1          1         NA
StationC          0          0          0          0
> camop_problem_lubridate
         2009-04-02 2009-04-03 2009-04-04 2009-04-05 2009-04-06 2009-04-07
StationA          1          1          1          1          1          1
StationB         NA          1          1          1          1          1
StationC         NA         NA          1          1          1          1
         2009-04-08 2009-04-09 2009-04-10 2009-04-11 2009-04-12 2009-04-13
StationA          1          1          1          1          1          1
StationB          1          1          1          1          1          1
StationC          1          1          1          1          1          1
         2009-04-14 2009-04-15 2009-04-16 2009-04-17 2009-04-18 2009-04-19
StationA          1          1          1          1          1          1
StationB          1          1          1          1          1          1
StationC          1          1          1          1          1          1
         2009-04-20 2009-04-21 2009-04-22 2009-04-23 2009-04-24 2009-04-25
StationA          1          1          1          1          1          1
StationB          1          1          1          1          1          1
StationC          1          1          1          1          1          1
         2009-04-26 2009-04-27 2009-04-28 2009-04-29 2009-04-30 2009-05-01
StationA          1          1          1          1          1          1
StationB          1          1          1          1          1          1
StationC          1          1          1          1          1          1
         2009-05-02 2009-05-03 2009-05-04 2009-05-05 2009-05-06 2009-05-07
StationA          1          1          1          1          1          1
StationB          1          1          1          1          1          1
StationC          1          1          1          1          1          1
         2009-05-08 2009-05-09 2009-05-10 2009-05-11 2009-05-12 2009-05-13
StationA          1          1          1          1          1          1
StationB          1          1          1          1          1          1
StationC          1          1          1          1          0          0
         2009-05-14 2009-05-15 2009-05-16 2009-05-17
StationA          1         NA         NA         NA
StationB          1          1          1         NA
StationC          0          0          0          0
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("cameraOperation", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("camtrapsMultiSeason")
> ### * camtrapsMultiSeason
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: camtrapsMultiSeason
> ### Title: Sample multi-season camera trap station information
> ### Aliases: camtrapsMultiSeason
> ### Keywords: datasets
> 
> ### ** Examples
> 
> # data were created with the following code:
> data(camtraps)
> 	
> camtraps_season2 <- camtraps
> 
> # change 2009 to 2010
> camtraps_season2[, "Setup_date"]     <- gsub("2009", "2010", camtraps_season2[, "Setup_date"])
> camtraps_season2[, "Retrieval_date"] <- gsub("2009", "2010", camtraps_season2[, "Retrieval_date"])
> camtraps_season2[, "Problem1_from"]  <- gsub("2009", "2010", camtraps_season2[, "Problem1_from"])
> camtraps_season2[, "Problem1_to"]    <- gsub("2009", "2010", camtraps_season2[, "Problem1_to"])
> 
> # add an extra station with different dates in session 2010
> camtraps_season2 <- rbind(camtraps_season2, NA)
> camtraps_season2$Station[4] <- "StationD"
> camtraps_season2$utm_y[4]  <- 607050
> camtraps_season2$utm_x[4]  <- 525000
> camtraps_season2$Setup_date[4]      <- "04/04/2010"
> camtraps_season2$Retrieval_date[4]  <- "17/06/2010"
> camtraps_season2$Problem1_from[4]   <- "20/05/2010"
> camtraps_season2$Problem1_to[4]     <- "30/05/2010"
> 
> # add season column
> camtraps$session         <- 2009
> camtraps_season2$session <- 2010
> 
> # combine the tables for 2 seasons
> camtrapsMultiSeason <- rbind(camtraps, camtraps_season2)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("camtrapsMultiSeason", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("checkSpeciesIdentification")
> ### * checkSpeciesIdentification
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: checkSpeciesIdentification
> ### Title: Consistency check on species image identification
> ### Aliases: checkSpeciesIdentification
> 
> ### ** Examples
> 
> 
> 
> ## Not run: 
> ##D # now exclude one of these 2 species 
> ##D check.folders2 <- checkSpeciesIdentification(inDir             = wd_images_ID,
> ##D                                              IDfrom            = "directory",
> ##D                                              hasCameraFolders  = FALSE,
> ##D                                              maxDeltaTime      = 120,
> ##D                                              excludeSpecies    = "EGY",
> ##D                                              writecsv          = FALSE)           
> ##D   
> ##D check.folders2   # the data frame is empty
> ##D 
> ##D # now we check only one station
> ##D check.folders3 <- checkSpeciesIdentification(inDir             = wd_images_ID,
> ##D                                              IDfrom            = "directory",
> ##D                                              hasCameraFolders  = FALSE,
> ##D                                              maxDeltaTime      = 120,
> ##D                                              stationsToCheck   = "StationB",
> ##D                                              writecsv          = FALSE)
> ##D check.folders3   # the data frame is empty
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("checkSpeciesIdentification", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("checkSpeciesNames")
> ### * checkSpeciesNames
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: checkSpeciesNames
> ### Title: Check species names against the ITIS taxonomic database
> ### Aliases: checkSpeciesNames
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D 
> ##D 
> ##D species_common <- c("Leopard Cat", "moonrat")
> ##D 
> ##D # ask = TRUE. Multiple matches for leopard cat will cause menu to pop up asking user input.
> ##D 
> ##D species.names.check1 <- checkSpeciesNames(speciesNames = species_common,
> ##D                                           searchtype   = "common",
> ##D                                           accepted     = TRUE,
> ##D                                           ask          = TRUE)
> ##D 2   # we choose entry 2
> ##D species.names.check1
> ##D 
> ##D 
> ##D # ask = FALSE. Multiple matches for leopard cat will cause NA.
> ##D 
> ##D species.names.check2 <- checkSpeciesNames(speciesNames = species_common,
> ##D                                           searchtype   = "common",
> ##D                                           accepted     = TRUE,
> ##D                                           ask          = FALSE)
> ##D species.names.check2
> ##D 
> ##D 
> ##D 
> ##D # search for scientific names
> ##D 
> ##D species_scientific <- c("Tragulus", "Prionailurus bengalensis")
> ##D 
> ##D species.names.check3 <- checkSpeciesNames(speciesNames = species_scientific,
> ##D                                           searchtype   = "scientific",
> ##D                                           accepted     = TRUE,
> ##D                                           ask          = TRUE)
> ##D species.names.check3
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("checkSpeciesNames", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("createSpeciesFolders")
> ### * createSpeciesFolders
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: createSpeciesFolders
> ### Title: Create species directories for species identification
> ### Aliases: createSpeciesFolders
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # create dummy directories for tests
> ##D # (normally, you'd use directory containing renamed, unsorted images)
> ##D 
> ##D # this will be used as inDir
> ##D wd_createDirTest <- file.path(getwd(), "createSpeciesFoldersTest")
> ##D 
> ##D # now we create 2 station subdirectories
> ##D dirs_to_create <- file.path(wd_createDirTest, c("StationA", "StationB"))
> ##D sapply(dirs_to_create, FUN = dir.create, recursive = TRUE)
> ##D 
> ##D # species names for which we want to create subdirectories
> ##D species <- c("Sambar Deer", "Bay Cat")
> ##D 
> ##D # create species subdirectories
> ##D SpecFolderCreate1 <- createSpeciesFolders (inDir               = wd_createDirTest,
> ##D                                            species             = species,
> ##D                                            hasCameraFolders = FALSE,
> ##D                                            removeFolders       = FALSE)
> ##D   
> ##D SpecFolderCreate1
> ##D 
> ##D # check if directories were created
> ##D list.dirs(wd_createDirTest)
> ##D 
> ##D # delete empty species directories
> ##D SpecFolderCreate2 <- createSpeciesFolders (inDir               = wd_createDirTest,
> ##D                                            species             = species,
> ##D                                            hasCameraFolders = FALSE,
> ##D                                            removeFolders       = TRUE)
> ##D 
> ##D SpecFolderCreate2
> ##D 
> ##D # check if species directories were deleted
> ##D list.dirs(wd_createDirTest)
> ##D 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("createSpeciesFolders", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("createStationFolders")
> ### * createStationFolders
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: createStationFolders
> ### Title: Create camera trap station directories for raw camera trap
> ###   images
> ### Aliases: createStationFolders
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # create dummy directory for tests (this will be used as inDir)
> ##D # (normally, you'd set up an empty directory, e.g. .../myStudy/rawImages)
> ##D wd_createStationDir <- file.path(tempdir(), "createStationFoldersTest")
> ##D 
> ##D # now we load the sample camera trap station data frame
> ##D data(camtraps)
> ##D 
> ##D # create station directories in wd_createStationDir
> ##D StationFolderCreate1 <- createStationFolders (inDir       = wd_createStationDir,
> ##D                                               stations    = as.character(camtraps$Station),
> ##D                                               createinDir = TRUE)
> ##D   
> ##D StationFolderCreate1
> ##D 
> ##D # check if directories were created
> ##D list.dirs(wd_createStationDir)
> ##D 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("createStationFolders", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("detectionHistory")
> ### * detectionHistory
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: detectionHistory
> ### Title: Species detection histories for occupancy analyses
> ### Aliases: detectionHistory
> 
> ### ** Examples
> 
> 
> # define image directory
> wd_images_ID <- system.file("pictures/sample_images", package = "camtrapR")
> 
> # load station information
> data(camtraps)
> 
> # create camera operation matrix
> camop_no_problem <- cameraOperation(CTtable      = camtraps,
+                                     stationCol   = "Station",
+                                     setupCol     = "Setup_date",
+                                     retrievalCol = "Retrieval_date",
+                                     hasProblems  = FALSE,
+                                     dateFormat   = "%d/%m/%Y"
+ )
> 
> ## Not run: 
> ##D if (Sys.which("exiftool") != ""){        # only run this function if ExifTool is available
> ##D recordTableSample <- recordTable(inDir               = wd_images_ID,
> ##D                                  IDfrom              = "directory",
> ##D                                  minDeltaTime        = 60,
> ##D                                  deltaTimeComparedTo = "lastRecord",
> ##D                                  exclude             = "NO_ID",
> ##D                                  timeZone            = "Asia/Kuala_Lumpur"
> ##D )
> ##D }
> ## End(Not run)
> data(recordTableSample)    # load the record history, as created above
> 
> 
> # compute detection history for a species
> 
> # without trapping effort
> DetHist1 <- detectionHistory(recordTable         = recordTableSample,
+                             camOp                = camop_no_problem,
+                             stationCol           = "Station",
+                             speciesCol           = "Species",
+                             recordDateTimeCol    = "DateTimeOriginal",
+                             species              = "VTA",
+                             occasionLength       = 7,
+                             day1                 = "station",
+                             datesAsOccasionNames = FALSE,
+                             includeEffort        = FALSE,
+                             timeZone             = "Asia/Kuala_Lumpur"
+ )
> 
> DetHist1                     # this is a list with 1 element
$detection_history
         o1 o2 o3 o4 o5 o6 o7
StationA  0  1  0  0  1  0 NA
StationB  0  1  0  1  0  0 NA
StationC  0  0  1  0  0  0 NA

> DetHist1$detection_history   # this is the contained detection/non-detection matrix
         o1 o2 o3 o4 o5 o6 o7
StationA  0  1  0  0  1  0 NA
StationB  0  1  0  1  0  0 NA
StationC  0  0  1  0  0  0 NA
> 
> 
> # with effort / using base R to define recordDateTimeFormat
> DetHist2 <- detectionHistory(recordTable          = recordTableSample,
+                              camOp                = camop_no_problem,
+                              stationCol           = "Station",
+                              speciesCol           = "Species",
+                              recordDateTimeCol    = "DateTimeOriginal",
+                              species              = "VTA",
+                              occasionLength       = 7,
+                              day1                 = "station",
+                              datesAsOccasionNames = FALSE,
+                              includeEffort        = TRUE,
+                              scaleEffort          = FALSE,
+                              timeZone             = "Asia/Kuala_Lumpur"
+ )
> 
> DetHist2$detection_history  # detection history  (alternatively, use: DetHist2[[1]])
         o1 o2 o3 o4 o5 o6 o7
StationA  0  1  0  0  1  0  0
StationB  0  1  0  1  0  0  0
StationC  0  0  1  0  0  0  0
> DetHist2$effort             # effort (alternatively, use: DetHist2[[2]])
         o1 o2 o3 o4 o5 o6 o7
StationA  7  7  7  7  7  7  1
StationB  7  7  7  7  7  7  2
StationC  7  7  7  7  7  7  2
> 
> # with effort / using lubridate package to define recordDateTimeFormat
> DetHist2_lub <- detectionHistory(recordTable          = recordTableSample,
+                              camOp                = camop_no_problem,
+                              stationCol           = "Station",
+                              speciesCol           = "Species",
+                              recordDateTimeCol    = "DateTimeOriginal",
+                              recordDateTimeFormat = "ymd HMS",
+                              species              = "VTA",
+                              occasionLength       = 7,
+                              day1                 = "station",
+                              datesAsOccasionNames = FALSE,
+                              includeEffort        = TRUE,
+                              scaleEffort          = FALSE,
+                              timeZone             = "Asia/Kuala_Lumpur"
+ )
> 
> DetHist2_lub$detection_history  # detection history  (alternatively, use: DetHist2[[1]])
         o1 o2 o3 o4 o5 o6 o7
StationA  0  1  0  0  1  0  0
StationB  0  1  0  1  0  0  0
StationC  0  0  1  0  0  0  0
> DetHist2_lub$effort             # effort (alternatively, use: DetHist2_lub[[2]])
         o1 o2 o3 o4 o5 o6 o7
StationA  7  7  7  7  7  7  1
StationB  7  7  7  7  7  7  2
StationC  7  7  7  7  7  7  2
> 
> 
> # multi-season detection history
> 
> # load multi-season data
> data(camtrapsMultiSeason)
> data(recordTableSampleMultiSeason)
> 
> # multi-season camera operation matrix
> camop_season <- cameraOperation(CTtable          = camtrapsMultiSeason,
+                                     stationCol   = "Station",
+                                     setupCol     = "Setup_date",
+                                     sessionCol   = "session",
+                                     retrievalCol = "Retrieval_date",
+                                     hasProblems  = TRUE,
+                                     dateFormat   = "%d/%m/%Y"
+ )
> 
> # multi-season detection history
> DetHist_multi <- detectionHistory(recordTable      = recordTableSampleMultiSeason,
+                             camOp                  = camop_season,
+                             stationCol             = "Station",
+                             speciesCol             = "Species",
+                             species                = "VTA",
+                             occasionLength         = 10,
+                             day1                   = "station",
+                             recordDateTimeCol      = "DateTimeOriginal",
+                             includeEffort          = TRUE,
+                             scaleEffort            = FALSE,
+                             timeZone               = "UTC",
+                             unmarkedMultFrameInput = TRUE
+ )
> 
> DetHist_multi
$detection_history
         o1 o2 o3 o4 o5 o6 o7 o8 o1 o2 o3 o4 o5 o6 o7 o8
StationA  1  0  0  1  0 NA NA NA  1  0  0  1  0 NA NA NA
StationB  0  1  1  0  0 NA NA NA  0  1  1  0  0 NA NA NA
StationC  0  0  1  0 NA NA NA NA  0  0  1  0 NA NA NA NA
StationD NA NA NA NA NA NA NA NA  0  0  0  0  0  0  0  0

$effort
         o1 o2 o3 o4 o5 o6 o7 o8 o1 o2 o3 o4 o5 o6 o7 o8
StationA 10 10 10 10  3 NA NA NA 10 10 10 10  3 NA NA NA
StationB 10 10 10 10  4 NA NA NA 10 10 10 10  4 NA NA NA
StationC 10 10 10  8 NA NA NA NA 10 10 10  8 NA NA NA NA
StationD NA NA NA NA NA NA NA NA 10 10 10 10  6  3 10  5

> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("detectionHistory", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("detectionMaps")
> ### * detectionMaps
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: detectionMaps
> ### Title: Generate maps of observed species richness and species presences
> ###   by station
> ### Aliases: detectionMaps
> 
> ### ** Examples
> 
> 
> # load station information
> data(camtraps)
> 
> # load record table
> data(recordTableSample)
> 
> 
> # create maps
> Mapstest <- detectionMaps(CTtable           = camtraps,
+                           recordTable       = recordTableSample,
+                           Xcol              = "utm_x",
+                           Ycol              = "utm_y",
+                           stationCol        = "Station",
+                           speciesCol        = "Species",
+                           writePNG          = FALSE,
+                           plotR             = TRUE,
+                           printLabels       = TRUE,
+                           richnessPlot      = TRUE,
+                           addLegend         = TRUE
+ )
> 
> 
> ## Not run: 
> ##D 
> ##D # with a polygon in the background
> ##D 
> ##D # make a dummy polygon for the background
> ##D poly1 <- Polygon(cbind(c(521500,526500,527000, 521500),c(607500, 608000, 603500, 603500)))
> ##D poly2 <- Polygons(list(poly1), "s1")
> ##D poly3 <- SpatialPolygons(list(poly2))
> ##D 
> ##D Mapstest2 <- detectionMaps(CTtable           = camtraps,
> ##D                            recordTable       = recordTableSample,
> ##D                            Xcol              = "utm_x",
> ##D                            Ycol              = "utm_y",
> ##D                            backgroundPolygon = poly3,         # this was added
> ##D                            stationCol        = "Station",
> ##D                            speciesCol        = "Species",
> ##D                            writePNG          = FALSE,
> ##D                            plotR             = TRUE,
> ##D                            printLabels       = TRUE,
> ##D                            richnessPlot      = TRUE,
> ##D                            addLegend         = TRUE
> ##D )
> ##D 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("detectionMaps", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("exifTagNames")
> ### * exifTagNames
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: exifTagNames
> ### Title: Show Exif metadata tags and tag names from JPEG images
> ### Aliases: exifTagNames
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D 
> ##D wd_images_ID <- system.file("pictures/sample_images", package = "camtrapR")
> ##D 
> ##D # return tag names only
> ##D exifTagNames(inDir          = wd_images_ID)
> ##D 
> ##D # return tag names and metadata
> ##D exifTagNames(inDir          = wd_images_ID,
> ##D              returnMetadata = TRUE)
> ##D 
> ##D 
> ##D # specify directory by name
> ##D exifTagNames(inDir          = wd_images_ID,
> ##D              returnMetadata = TRUE,
> ##D              whichSubDir    = "StationA")
> ##D              
> ##D # specify inDir and fileName
> ##D exifTagNames(inDir          = wd_images_ID,
> ##D              returnMetadata = TRUE,
> ##D              fileName       = file.path("StationC", "TRA", "StationC__2009-05-02__00-10-00(1).JPG"))
> ##D              
> ##D # it also works this way
> ##D exifTagNames(inDir          = file.path(wd_images_ID, "StationC", "TRA"),
> ##D              returnMetadata = TRUE,
> ##D              fileName       = "StationC__2009-05-02__00-10-00(1).JPG")
> ##D              
> ##D # or by only specifying fileName (line break due to R package policy)
> ##D exifTagNames(fileName       = file.path(wd_images_ID, "StationC", "TRA", 
> ##D                                         "StationC__2009-05-02__00-10-00(1).JPG"),
> ##D              returnMetadata = TRUE)
> ##D              
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("exifTagNames", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("exiftoolPath")
> ### * exiftoolPath
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: exiftoolPath
> ### Title: Add a directory to PATH temporarily
> ### Aliases: exiftoolPath
> 
> ### ** Examples
> 
> exiftool_dir <- "C:/Path/To/Exiftool"
> exiftoolPath(exiftoolDir = exiftool_dir)
> 
> # check if it has been added to PATH
> grepl(exiftool_dir,  Sys.getenv("PATH"))
[1] TRUE
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("exiftoolPath", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fixDateTimeOriginal")
> ### * fixDateTimeOriginal
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fixDateTimeOriginal
> ### Title: Fix DateTimeOriginal Exif metadata tag in Reconyx Hyperfire
> ###   cameras
> ### Aliases: fixDateTimeOriginal
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # a hypothetical example
> ##D 
> ##D wd_images_hyperfire <- "C:/Some/Directory"
> ##D 
> ##D fixDateTimeOriginal(inDir     = wd_images_hyperfire,
> ##D                     recursive = TRUE)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fixDateTimeOriginal", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("getSpeciesImages")
> ### * getSpeciesImages
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getSpeciesImages
> ### Title: Collect all images of a species
> ### Aliases: getSpeciesImages
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # define image directory
> ##D wd_images_ID <- system.file("pictures/sample_images", package = "camtrapR")
> ##D wd_images_ID_copy <- file.path(tempdir(), "sample_species_images")
> ##D 
> ##D species_to_copy <- "VTA"    # = Viverra tangalunga, Malay Civet
> ##D 
> ##D specImagecopy <- getSpeciesImages(species                 = species_to_copy,
> ##D                                   inDir                   = wd_images_ID,
> ##D                                   outDir                  = wd_images_ID_copy,
> ##D                                   createStationSubfolders = FALSE,
> ##D                                   IDfrom                  = "directory"
> ##D                                   )
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getSpeciesImages", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("imageRename")
> ### * imageRename
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: imageRename
> ### Title: Copy and rename images based on camera trap station ID and
> ###   creation date
> ### Aliases: imageRename
> 
> ### ** Examples
> 
> 
> 
>   ## Not run: 
> ##D   
> ##D ### "trial" run. create a table with file names after renaming, but don't copy images.
> ##D 
> ##D # first, find sample image directory in package directory:
> ##D wd_images_raw <- system.file("pictures/raw_images", package = "camtrapR")
> ##D 
> ##D # because copyImages = FALSE, outDir does not need to be defined
> ##D renaming.table <- imageRename(inDir               = wd_images_raw,     
> ##D                               hasCameraFolders = FALSE,
> ##D                               copyImages          = FALSE,
> ##D                               writecsv            = FALSE
> ##D   )
> ##D 
> ##D 
> ##D   
> ##D ### a real example in which images are copied and renamed 
> ##D 
> ##D   # define raw image location
> ##D wd_images_raw <- system.file("pictures/raw_images", package = "camtrapR") 
> ##D 
> ##D   # define destination for renamed images
> ##D wd_images_raw_renamed <- file.path(tempdir(), "raw_images_renamed")       
> ##D 
> ##D 
> ##D   # now we have to define outDir because copyImages = TRUE
> ##D renaming.table2 <- imageRename(inDir               = wd_images_raw,
> ##D                                outDir              = wd_images_raw_renamed,       
> ##D                                hasCameraFolders    = FALSE,
> ##D                                copyImages          = TRUE,
> ##D                                writecsv            = FALSE
> ##D   )
> ##D   
> ##D   # show output files
> ##D   list.files(wd_images_raw_renamed, recursive = TRUE)
> ##D   
> ##D   # output table
> ##D   renaming.table2
> ##D   
> ##D   
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("imageRename", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("recordTable")
> ### * recordTable
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: recordTable
> ### Title: Generate a species record table from camera trap images
> ### Aliases: recordTable
> 
> ### ** Examples
> 
> 
> 
> ## Not run: 
> ##D    # the example  run too long to pass CRAN tests
> ##D 
> ##D # set directory with camera trap images in station directories
> ##D wd_images_ID_species <- system.file("pictures/sample_images", package = "camtrapR")
> ##D 
> ##D if (Sys.which("exiftool") != ""){        # only run these examples if ExifTool is available
> ##D 
> ##D 
> ##D rec_table1 <- recordTable(inDir               = wd_images_ID_species,
> ##D                        IDfrom                 = "directory",
> ##D                        minDeltaTime           = 60,
> ##D                        deltaTimeComparedTo    = "lastRecord",
> ##D                        writecsv               = FALSE,
> ##D                        additionalMetadataTags = c("EXIF:Model", "EXIF:Make")
> ##D )
> ##D # note argument additionalMetadataTags: it contains tag names as returned by function exifTagNames
> ##D 
> ##D rec_table2 <- recordTable(inDir               = wd_images_ID_species,
> ##D                        IDfrom                 = "directory",
> ##D                        minDeltaTime           = 60,
> ##D                        deltaTimeComparedTo    = "lastRecord",
> ##D                        exclude                = "NO_ID",
> ##D                        writecsv               = FALSE,
> ##D                        timeZone               = "Asia/Kuala_Lumpur",
> ##D                        additionalMetadataTags = c("EXIF:Model", "EXIF:Make", "NonExistingTag"),
> ##D                        eventSummaryColumn     = "EXIF:Make",
> ##D                        eventSummaryFunction   = "unique"
> ##D                        )
> ##D                        
> ##D # note the warning that the last tag in "additionalMetadataTags" ("NonExistingTag") was not found
> ##D 
> ##D 
> ##D any(rec_table1$Species == "NO_ID")    # TRUE
> ##D any(rec_table2$Species == "NO_ID")    # FALSE
> ##D 
> ##D 
> ##D # here's how the removeDuplicateRecords argument works
> ##D 
> ##D rec_table3a <- recordTable(inDir              = wd_images_ID_species,
> ##D                        IDfrom                 = "directory",
> ##D                        minDeltaTime           = 0,
> ##D                        exclude                = "NO_ID",
> ##D                        timeZone               = "Asia/Kuala_Lumpur",
> ##D                        removeDuplicateRecords = FALSE
> ##D )
> ##D 
> ##D rec_table3b <- recordTable(inDir              = wd_images_ID_species,
> ##D                        IDfrom                 = "directory",
> ##D                        minDeltaTime           = 0,
> ##D                        exclude                = "NO_ID",
> ##D                        timeZone               = "Asia/Kuala_Lumpur",
> ##D                        removeDuplicateRecords = TRUE
> ##D )
> ##D 
> ##D 
> ##D anyDuplicated(rec_table3a[, c("Station", "Species", "DateTimeOriginal")])   # got duplicates
> ##D anyDuplicated(rec_table3b[, c("Station", "Species", "DateTimeOriginal")])   # no duplicates
> ##D 
> ##D # after removing duplicates, both are identical:
> ##D whichAreDuplicated <- which(duplicated(rec_table3a[, c("Station", "Species", "DateTimeOriginal")]))
> ##D all(rec_table3a[-whichAreDuplicated,] == rec_table3b)
> ##D 
> ##D } else {                                # show function output if ExifTool is not available
> ##D message("ExifTool is not available. Cannot test function. Loading recordTableSample instead")
> ##D data(recordTableSample)
> ##D }
> ##D 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("recordTable", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("recordTableIndividual")
> ### * recordTableIndividual
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: recordTableIndividual
> ### Title: Generate a single-species record table with individual
> ###   identification from camera trap images
> ### Aliases: recordTableIndividual
> 
> ### ** Examples
> 
> 
>  wd_images_ID_individual <- system.file("pictures/sample_images_tagged/LeopardCat", 
+                                         package = "camtrapR")
>  # missing space in species = "LeopardCat" is because of CRAN package policies
>  # note argument additionalMetadataTags: it contains tag names as returned by function exifTagNames
> 
>  if (Sys.which("exiftool") != ""){        # only run these examples if ExifTool is available
+ 
+  rec_table_pbe <- recordTableIndividual(inDir                  = wd_images_ID_individual,
+                                         minDeltaTime           = 60,
+                                         deltaTimeComparedTo    = "lastRecord",
+                                         hasStationFolders      = FALSE,
+                                         IDfrom                 = "metadata",
+                                         camerasIndependent     = FALSE,
+                                         writecsv               = FALSE,
+                                         metadataIDTag          = "individual",
+                                         additionalMetadataTags = c("EXIF:Model", "EXIF:Make"),
+                                         timeZone               = "Asia/Kuala_Lumpur"
+  )
+  
+  
+  # extracting some example summary stats too 
+  # a nonsensical example, get all unique cameras with which the event was photographed
+  
+   rec_table_pbe2 <- recordTableIndividual(inDir                = wd_images_ID_individual,
+                                         minDeltaTime           = 60,
+                                         deltaTimeComparedTo    = "lastRecord",
+                                         hasStationFolders      = FALSE,
+                                         IDfrom                 = "metadata",
+                                         camerasIndependent     = FALSE,
+                                         writecsv               = FALSE,
+                                         metadataIDTag          = "individual",
+                                         additionalMetadataTags = c("EXIF:Model", "EXIF:Make"),
+                                         timeZone               = "Asia/Kuala_Lumpur",
+                                         eventSummaryColumn     = "EXIF:Make",
+                                         eventSummaryFunction   = "unique"
+  )
+ 
+  } else {                                # show function output if ExifTool is not available
+  message("ExifTool is not available. Cannot test function")
+  data(recordTableIndividualSample)
+  }
StationA, StationB, StationC:     26 images    3 duplicates removed      |====================|  100%
StationA, StationB, StationC:     26 images    3 duplicates removed      |====================|  100%
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("recordTableIndividual", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("recordTableIndividualSampleMultiSeason")
> ### * recordTableIndividualSampleMultiSeason
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: recordTableIndividualSampleMultiSeason
> ### Title: Sample single-species multi-season record table with custom
> ###   metadata from camera trap images
> ### Aliases: recordTableIndividualSampleMultiSeason
> ### Keywords: datasets
> 
> ### ** Examples
> 
> # example data were created as follows:
> data(recordTableIndividualSample)
> 
> recordTableIndividualSample_season2 <- recordTableIndividualSample[1:10,]
> recordTableIndividualSample_season2$DateTimeOriginal <- gsub("2009", "2010", 
+       recordTableIndividualSample_season2$DateTimeOriginal)
> recordTableIndividualSampleMultiSeason <- rbind(recordTableIndividualSample, 
+       recordTableIndividualSample_season2)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("recordTableIndividualSampleMultiSeason", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("recordTableSampleMultiSeason")
> ### * recordTableSampleMultiSeason
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: recordTableSampleMultiSeason
> ### Title: Sample multi-season species record table from camera trap images
> ### Aliases: recordTableSampleMultiSeason
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 	# data were created with the following code:
> 
> 	data(recordTableSample)
> 	recordTableSample_season2 <- recordTableSample
> 	
> 	# substitute 2009 with 2010
> 	recordTableSample_season2$DateTimeOriginal <- gsub("2009", "2010", 
+ 	     recordTableSample_season2$DateTimeOriginal) 
>   # combine with season 2009
> 	recordTableSampleMultiSeason <- rbind(recordTableSample, recordTableSample_season2)    
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("recordTableSampleMultiSeason", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("spatialDetectionHistory")
> ### * spatialDetectionHistory
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: spatialDetectionHistory
> ### Title: Generate a 'capthist' object for spatial capture-recapture
> ###   analyses from camera-trapping data
> ### Aliases: spatialDetectionHistory
> 
> ### ** Examples
> 
> 
> data(recordTableIndividualSample)
> data(camtraps)
> 
> # create camera operation matrix (with problems/malfunction)
> camop_problem <- cameraOperation(CTtable      = camtraps,
+                                  stationCol   = "Station",
+                                  setupCol     = "Setup_date",
+                                  retrievalCol = "Retrieval_date",
+                                  writecsv     = FALSE,
+                                  hasProblems  = TRUE,
+                                  dateFormat   = "%d/%m/%Y"
+ )
> 
> sdh <- spatialDetectionHistory(recordTableIndividual = recordTableIndividualSample,
+                                species               = "LeopardCat",
+                                camOp                 = camop_problem,
+                                CTtable               = camtraps,
+                                output                = "binary",
+                                stationCol            = "Station",
+                                speciesCol            = "Species",
+                                Xcol                  = "utm_x",
+                                Ycol                  = "utm_y",
+                                individualCol         = "Individual",
+                                recordDateTimeCol     = "DateTimeOriginal",
+                                recordDateTimeFormat  = "%Y-%m-%d %H:%M:%S",
+                                occasionLength        = 10,
+                                day1                  = "survey",
+                                includeEffort         = TRUE,
+                                timeZone              = "Asia/Kuala_Lumpur"
+   )
> 
> # missing space in species = "LeopardCat" was introduced by recordTableIndividual
> # (because of CRAN package policies.
> # In your data you can have spaces in your directory names)
> 
>   summary(sdh)
Object class       capthist 
Detector type      proximity 
Detector number    3 
Average spacing    2575.831 m 
x-range            523000 526000 m 
y-range            604000 607050 m 

 Usage range by occasion
     1  2  3  4 5
min  8 10 10 10 0
max 10 10 10 10 5

Counts by occasion 
                  1 2 3 4 5 Total
n                 2 2 3 2 1    10
u                 2 0 1 0 0     3
f                 0 1 0 2 0     3
M(t+1)            2 2 3 3 3     3
losses            0 0 0 0 0     0
detections        3 4 4 3 1    15
detectors visited 2 3 3 2 1    11
detectors used    3 3 3 3 2    14
>   plot(sdh, tracks = TRUE)
Warning in plot.capthist(sdh, tracks = TRUE) :
  track for repeat detections on same occasion joins points in arbitrary sequence
> 
>   ## multi-season capthist object
>   # see vignette "3. Extracting Data from Camera Trapping Images, creating occupancy & secr input"
>   
>   data(camtrapsMultiSeason)
>   camtrapsMultiSeason$session[camtrapsMultiSeason$session == 2009] <- 1
>   camtrapsMultiSeason$session[camtrapsMultiSeason$session == 2010] <- 2
> 
>   data(recordTableIndividualSampleMultiSeason)
> 
>   # create camera operation matrix (with problems/malfunction)
>   camop_session <- cameraOperation(CTtable         = camtrapsMultiSeason,
+                                       stationCol   = "Station",
+                                       setupCol     = "Setup_date",
+                                       sessionCol   = "session",
+                                       retrievalCol = "Retrieval_date",
+                                       hasProblems  = TRUE,
+                                       dateFormat   = "%d/%m/%Y"
+   )
> 
> sdh_multi <- spatialDetectionHistory(recordTableIndividual = recordTableIndividualSampleMultiSeason,
+                                species               = "LeopardCat",
+                                output                = "binary",
+                                camOp                 = camop_session,
+                                CTtable               = camtrapsMultiSeason,
+                                stationCol            = "Station",
+                                speciesCol            = "Species",
+                                sessionCol            = "session",
+                                Xcol                  = "utm_x",
+                                Ycol                  = "utm_y",
+                                individualCol         = "Individual",
+                                recordDateTimeCol     = "DateTimeOriginal",
+                                recordDateTimeFormat  = "%Y-%m-%d %H:%M:%S",
+                                occasionLength        = 10,
+                                day1                  = "survey",
+                                includeEffort         = TRUE,
+                                timeZone              = "Asia/Kuala_Lumpur",
+                                stationCovariateCols  = "utm_y",         # example
+                                individualCovariateCols = "Individual"   # example
+   )
> 
>   summary(sdh_multi)
$`1`
Object class       capthist 
Detector type      proximity 
Detector number    3 
Average spacing    2575.831 m 
x-range            523000 526000 m 
y-range            604000 607050 m 

 Usage range by occasion
     1  2  3  4 5
min  8 10 10 10 0
max 10 10 10 10 5

Counts by occasion 
                  1 2 3 4 5 Total
n                 2 2 3 2 1    10
u                 2 0 1 0 0     3
f                 0 1 0 2 0     3
M(t+1)            2 2 3 3 3     3
losses            0 0 0 0 0     0
detections        3 4 4 3 1    15
detectors visited 2 3 3 2 1    11
detectors used    3 3 3 3 2    14

Individual covariates
 Individual
 1:1       
 2:1       
 3:1       


$`2`
Object class       capthist 
Detector type      proximity 
Detector number    4 
Average spacing    2496.591 m 
x-range            523000 526000 m 
y-range            604000 607050 m 

 Usage range by occasion
    1  2  3  4  5 6 7  8 9
min 3 10 10 10  5 0 0  0 0
max 5 10 10 10 10 3 6 10 2

Counts by occasion 
                  1 2 3 4 5 6 7 8 9 Total
n                 1 2 2 0 1 0 0 0 0     6
u                 1 1 0 0 0 0 0 0 0     2
f                 0 0 2 0 0 0 0 0 0     2
M(t+1)            1 2 2 2 2 2 2 2 2     2
losses            0 0 0 0 0 0 0 0 0     0
detections        1 2 2 0 1 0 0 0 0     6
detectors visited 1 1 2 0 1 0 0 0 0     5
detectors used    4 4 4 4 4 1 1 1 1    24

Individual covariates
 Individual
 1:1       
 2:1       


>   plot(sdh_multi, tracks = TRUE)
Warning in plot.capthist(sdh_multi, tracks = TRUE) :
  screen layout does not allow for all sessions and some plots may be lost; set par mfrow
Warning in FUN(X[[i]], ...) :
  track for repeat detections on same occasion joins points in arbitrary sequence
 1  2 
15  6 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("spatialDetectionHistory", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("surveyReport")
> ### * surveyReport
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: surveyReport
> ### Title: Create a report about a camera trapping survey and species
> ###   detections
> ### Aliases: surveyReport
> 
> ### ** Examples
> 
> data(camtraps)
> data(recordTableSample)
> 
> reportTest <- surveyReport (recordTable          = recordTableSample,
+                             CTtable              = camtraps,
+                             speciesCol           = "Species",
+                             stationCol           = "Station",
+                             setupCol             = "Setup_date",
+                             retrievalCol         = "Retrieval_date",
+                             CTDateFormat         = "%d/%m/%Y", 
+                             recordDateTimeCol    = "DateTimeOriginal",
+                             recordDateTimeFormat = "%Y-%m-%d %H:%M:%S")

-------------------------------------------------------
[1] "Total number of stations:  3"

-------------------------------------------------------
[1] "Number of operational stations:  3"

-------------------------------------------------------
[1] "n nights with cameras set up (operational or not. NOTE: only correct if 1 camera per station): 128"

-------------------------------------------------------
[1] "n nights with cameras set up and active (trap nights. NOTE: only correct if 1 camera per station): 128"

-------------------------------------------------------
[1] "total trapping period:  2009-04-02 - 2009-05-17"
> 
> class(reportTest)  # a list with
[1] "list"
> length(reportTest) # 5 elements
[1] 5
> 
> reportTest[[1]]    # camera trap operation times and image date ranges
   Station setup_date first_image_date last_image_date retrieval_date
1 StationA 2009-04-02       2009-04-10      2009-05-07     2009-05-14
2 StationB 2009-04-03       2009-04-05      2009-05-14     2009-05-16
3 StationC 2009-04-04       2009-04-06      2009-05-12     2009-05-17
  n_nights_total n_nights_active n_cameras
1             42              42         1
2             43              43         1
3             43              43         1
> reportTest[[2]]    # number of species by station
   Station n_species
1 StationA         2
2 StationB         3
3 StationC         4
> reportTest[[3]]    # number of events and number of stations by species
  species n_events n_stations
1     EGY        6          1
2     MNE        2          1
3     PBE       18          3
4     TRA        8          1
5     VTA        5          3
> reportTest[[4]]    # number of species events by station
   Station Species n_events
1 StationA     PBE        4
2 StationA     VTA        2
3 StationB     MNE        2
4 StationB     PBE        8
5 StationB     VTA        2
6 StationC     EGY        6
7 StationC     PBE        6
8 StationC     TRA        8
9 StationC     VTA        1
> reportTest[[5]]    # number of species events by station including 0s (non-observed species)
    Station Species n_events
1  StationA     EGY        0
2  StationA     MNE        0
3  StationA     PBE        4
4  StationA     TRA        0
5  StationA     VTA        2
6  StationB     EGY        0
7  StationB     MNE        2
8  StationB     PBE        8
9  StationB     TRA        0
10 StationB     VTA        2
11 StationC     EGY        6
12 StationC     MNE        0
13 StationC     PBE        6
14 StationC     TRA        8
15 StationC     VTA        1
> 
> # with camera problems
> 
> reportTest_problem <- surveyReport (recordTable          = recordTableSample,
+                                     CTtable              = camtraps,
+                                     speciesCol           = "Species",
+                                     stationCol           = "Station",
+                                     setupCol             = "Setup_date",
+                                     retrievalCol         = "Retrieval_date",
+                                     CTDateFormat         = "%d/%m/%Y", 
+                                     recordDateTimeCol    = "DateTimeOriginal",
+                                     recordDateTimeFormat = "%Y-%m-%d %H:%M:%S",
+                                     CTHasProblems        = TRUE)

-------------------------------------------------------
[1] "Total number of stations:  3"

-------------------------------------------------------
[1] "Number of operational stations:  3"

-------------------------------------------------------
[1] "n nights with cameras set up (operational or not. NOTE: only correct if 1 camera per station): 128"

-------------------------------------------------------
[1] "n nights with cameras set up and active (trap nights. NOTE: only correct if 1 camera per station): 123"

-------------------------------------------------------
[1] "total trapping period:  2009-04-02 - 2009-05-17"
> 
> reportTest_problem$survey_dates
   Station setup_date first_image_date last_image_date retrieval_date
1 StationA 2009-04-02       2009-04-10      2009-05-07     2009-05-14
2 StationB 2009-04-03       2009-04-05      2009-05-14     2009-05-16
3 StationC 2009-04-04       2009-04-06      2009-05-12     2009-05-17
  n_nights_total n_nights_active n_cameras
1             42              42         1
2             43              43         1
3             43              38         1
> 
> ## Not run: 
> ##D # run again with sinkpath defined
> ##D reportTest <- surveyReport (recordTable          = recordTableSample,
> ##D                             CTtable              = camtraps,
> ##D                             speciesCol           = "Species",
> ##D                             stationCol           = "Station",
> ##D                             setupCol             = "Setup_date",
> ##D                             retrievalCol         = "Retrieval_date",
> ##D                             CTDateFormat         = "%d/%m/%Y", 
> ##D                             recordDateTimeCol    = "DateTimeOriginal",
> ##D                             recordDateTimeFormat = "%Y-%m-%d %H:%M:%S",
> ##D                             sinkpath             = getwd())
> ##D 
> ##D # have a look at the text file
> ##D readLines(list.files(getwd(), pattern = paste("survey_report_", Sys.Date(), ".txt", sep = ""), 
> ##D 					 full.names = TRUE))
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("surveyReport", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("timeShiftImages")
> ### * timeShiftImages
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: timeShiftImages
> ### Title: Apply time shifts to JPEG image metadata
> ### Aliases: timeShiftImages
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D 
> ##D # copy sample images to temporary directory (so we don't mess around in the package directory)
> ##D wd_images_ID <- system.file("pictures/sample_images", package = "camtrapR")
> ##D file.copy(from = wd_images_ID, to = tempdir(), recursive = TRUE)
> ##D wd_images_ID_copy <- file.path(tempdir(), "sample_images")
> ##D 
> ##D data(timeShiftTable)
> ##D 
> ##D 
> ##D timeshift_run <- timeShiftImages(inDir                = wd_images_ID_copy,
> ##D                                  timeShiftTable       = timeShiftTable,
> ##D                                  stationCol           = "Station",
> ##D                                  hasCameraFolders     = FALSE,
> ##D                                  timeShiftColumn      = "timeshift",
> ##D                                  timeShiftSignColumn  = "sign",
> ##D                                  undo                 = FALSE
> ##D )
> ##D 
> ##D 
> ##D timeshift_undo <- timeShiftImages(inDir               = wd_images_ID_copy,
> ##D                                   timeShiftTable      = timeShiftTable,
> ##D                                   stationCol          = "Station",
> ##D                                   hasCameraFolders    = FALSE,
> ##D                                   timeShiftColumn     = "timeshift",
> ##D                                   timeShiftSignColumn = "sign",
> ##D                                   undo                = TRUE
> ##D )
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("timeShiftImages", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  7.57 1.13 15.2 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
